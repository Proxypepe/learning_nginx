user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

load_module modules/ngx_http_opentracing_module.so;


events {}

http {
    # Load a vendor tracer
    #opentracing_load_tracer /usr/local/libjaegertracing_plugin.so 
    # /etc/jaeger/jaeger-config.json;
    #opentracing_load_tracer /usr/local/lib/libzipkin_opentracing_plugin.so
    # /etc/zipkin/zipkin-config.json;
    opentracing on;

    opentracing_tag bytes_sent $bytes_sent;
    opentracing_tag http_user_agent $http_user_agent;
    opentracing_tag request_time $request_time;
    opentracing_tag upstream_addr $upstream_addr;
    opentracing_tag upstream_bytes_received $upstream_bytes_received;
    opentracing_tag upstream_cache_status $upstream_cache_status;
    opentracing_tag upstream_connect_time $upstream_connect_time;
    opentracing_tag upstream_header_time $upstream_header_time;
    opentracing_tag upstream_queue_time $upstream_queue_time;
    opentracing_tag upstream_response_time $upstream_response_time; 

    server {
        listen 80;
        location / {
            # The operation name used for OpenTracing Spans defaults 
            # to the name of the 'location' block,
            # but uncomment this directive to customize it.
            #opentracing_operation_name $uri;
            # Propagate the active Span context upstream, 
            # so that the trace can be continued by the backend.
            opentracing_propagate_context;
            # Example application location service
            proxy_pass http://10.0.0.2:8080; 
        }

    }
}
